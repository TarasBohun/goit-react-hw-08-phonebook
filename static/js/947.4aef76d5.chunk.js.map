{"version":3,"file":"static/js/947.4aef76d5.chunk.js","mappings":"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","sources":["components/FormContacts/FormContacts.styled.jsx","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/contacts/selectors.js","hooks/useContacts.js","components/FormContacts/FormContacts.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Form as FormikForm, Field as InputField } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  padding: 30px 20px;\n  width: 300px;\n  height: fit-content;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const Field = styled(InputField)`\n  font-size: 18px;\n  padding-left: 20px;\n  border-radius: 6px;\n  border: none;\n  height: 35px;\n  width: 280px;\n\n  color: #566574;\n  &:focus {\n    color: #fff;\n  }\n\n  &:hover::-webkit-input-placeholder {\n    transition: all 0.3s;\n    color: paleturquoise;\n  }\n  &:focus::-webkit-input-placeholder {\n    transition: all 0.3s;\n    color: paleturquoise;\n  }\n\n  &:hover {\n    transition: all 0.3s;\n    background-color: rgba(255, 255, 255, 0.3);\n  }\n  &:focus {\n    transition: all 0.3s;\n    background-color: rgba(255, 255, 255, 0.3);\n  }\n`;\n\nexport const SubmitButton = styled.button`\n  display: block;\n  width: 50%;\n  margin-left: auto;\n  margin-right: auto;\n  font-size: 18px;\n  padding-top: 10px;\n  padding-bottom: 10px;\n`;\n","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filters.filterValue;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filterValue) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterValue.toLowerCase())\n    );\n  }\n);\n","import { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\n\nexport const useContacts = () => useSelector(selectVisibleContacts);\n","import { Formik, ErrorMessage } from 'formik';\nimport { Form, SubmitButton, Field } from './FormContacts.styled';\n\nimport { useDispatch } from 'react-redux';\nimport { useContacts } from 'hooks/useContacts';\nimport { addContact } from 'redux/contacts/getContacts';\n\nexport const FormContacts = () => {\n  const dispatch = useDispatch();\n  const contacts = useContacts();\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      onSubmit={(values, actions) => {\n        if (\n          contacts.find(\n            contact => contact.name.toLowerCase() === values.name.toLowerCase()\n          )\n        ) {\n          alert(`${values.name} is already in contacts`);\n          return;\n        }\n        dispatch(addContact(values));\n        actions.resetForm();\n      }}\n    >\n      <Form>\n        <label>\n          <Field\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n          <ErrorMessage name=\"name\" />\n        </label>\n\n        <label>\n          <Field\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n          <ErrorMessage name=\"number\" />\n        </label>\n\n        <SubmitButton type=\"submit\">Add contact</SubmitButton>\n      </Form>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  margin-top: 16px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  border-radius: 6px;\n  width: 380px;\n  padding: 10px;\n  background-color: #e7e4e4df;\n`;\n\nexport const Item = styled.li`\n  color: #3e3c3c;\n  font-size: 16px;\n`;\n\nexport const Container = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 5px;\n`;\n","import { List, Item, Container } from './ContactList.styled';\n\nimport { useContacts } from 'hooks/useContacts';\nimport { deleteContact } from 'redux/contacts/getContacts';\nimport { useDispatch } from 'react-redux';\n\nexport const ContactList = () => {\n  const contacts = useContacts();\n  const dispatch = useDispatch();\n\n  return (\n    <List>\n      {contacts.map(({ id, name, number }) => {\n        return (\n          <Container key={id}>\n            <Item>\n              {name} - {number}\n            </Item>\n            <button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n              Delete\n            </button>\n          </Container>\n        );\n      })}\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterInput = styled.input`\n  font-size: 14px;\n  padding-left: 20px;\n  border-radius: 6px;\n  border: none;\n  height: 25px;\n  width: 180px;\n\n  color: #566574;\n  &:focus {\n    color: #fff;\n  }\n\n  &:hover::-webkit-input-placeholder {\n    transition: all 0.3s;\n    color: paleturquoise;\n  }\n  &:focus::-webkit-input-placeholder {\n    transition: all 0.3s;\n    color: paleturquoise;\n  }\n\n  &:hover {\n    transition: all 0.3s;\n    background-color: rgba(255, 255, 255, 0.3);\n  }\n  &:focus {\n    transition: all 0.3s;\n    background-color: rgba(255, 255, 255, 0.3);\n  }\n`;\n","import { filterContact } from 'redux/contacts/filterSlice';\nimport { useSelector } from 'react-redux';\nimport { selectFilter } from '../../redux/contacts/selectors';\n\nimport { useDispatch } from 'react-redux';\n\nimport { FilterInput } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const value = useSelector(selectFilter);\n\n  const changeFilter = e => {\n    const filter = e.currentTarget.value;\n    dispatch(filterContact(filter));\n  };\n\n  return (\n    <div>\n      <FilterInput\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Find contacts by name\"\n        value={value}\n        onChange={changeFilter}\n      />\n    </div>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n  /* flex-direction: column; */\n  align-items: center;\n  gap: 100px;\n  margin-top: 20px;\n`;\n\nexport const ContactsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n\n  min-height: 256px;\n`;\n\nexport const TitleForm = styled.h1`\n  font-weight: 500;\n  font-size: 30px;\n  text-align: center;\n  color: paleturquoise;\n`;\n\nexport const TitleContacts = styled.h1`\n  font-weight: 500;\n  font-size: 30px;\n  text-align: center;\n  color: paleturquoise;\n  margin-bottom: 30px;\n`;\n","import { FormContacts } from 'components/FormContacts';\nimport { ContactList } from 'components/ContactList';\n\nimport { Filter } from 'components/Filter';\nimport {\n  Container,\n  ContactsContainer,\n  TitleForm,\n  TitleContacts,\n} from './Contacts.styled';\n\nimport { fetchContacts } from 'redux/contacts/getContacts';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n    // console.log('dispatch1');\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <div>\n        <TitleForm>Create contact</TitleForm>\n        <FormContacts />\n      </div>\n      <ContactsContainer>\n        <TitleContacts>Yours contacts</TitleContacts>\n        <Filter />\n        <ContactList />\n      </ContactsContainer>\n    </Container>\n  );\n};\n\nexport default Contacts;\n"],"names":["Form","styled","FormikForm","Field","InputField","SubmitButton","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","selectFilter","state","filters","filterValue","selectVisibleContacts","contacts","items","filter","contact","toLowerCase","includes","useContacts","useSelector","FormContacts","dispatch","useDispatch","initialValues","number","onSubmit","values","actions","alert","addContact","resetForm","type","placeholder","pattern","title","required","List","Item","Container","ContactList","id","onClick","deleteContact","FilterInput","Filter","onChange","e","currentTarget","filterContact","ContactsContainer","TitleForm","TitleContacts","useEffect","fetchContacts"],"sourceRoot":""}